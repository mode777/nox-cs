name: Build and Package Library

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  # pull_request:
  #   branches:
  #     - main

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with: 
        submodules: true

    #- name: Set up CMake
    #  uses: lukka/get-cmake@latest

    - name: Install dependencies on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install  -y --fix-missing --no-install-recommends libasound2-dev libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev

    # - name: Install dependencies on Windows
    #   if: matrix.os == 'windows-latest'
    #   run: |
    #     choco install cmake
    #     choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools"

    # - name: Install dependencies on macOS
    #   if: matrix.os == 'macos-latest'
    #   run: brew install cmake

    - name: Configure CMake on Windows
      if: matrix.os == 'windows-latest'
      run: cmake -G "MinGW Makefiles" -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} native

    - name: Configure CMake on macOS and Linux
      if: matrix.os != 'windows-latest'
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} native

    - name: Build the library
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    - name: Upload built artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: libnox.dll
        path: build

    - name: Upload built artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: libnox.dylib
        path: build

    - name: Upload built artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: libnox.so
        path: build

  pack:
    name: Pack into NuGet
    needs: build
    runs-on: ubuntu-latest  # or any other OS

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Download Windows build artifact (libnox.dll)
      uses: actions/download-artifact@v4
      with:
        name: libnox.dll  # artifact name from the build step for Windows

    - name: Copy libnox.dll to win-x64 folder
      run: |
        mkdir -p managed/Nox/runtimes/win-x64/native
        cp libnox.dll managed/Nox/runtimes/win-x64/native/

    - name: Download Linux build artifact (libnox.so)
      uses: actions/download-artifact@v4
      with:
        name: libnox.so
    
    - name: Copy libnox.so to linux-x64 folder
      run: |
        mkdir -p managed/Nox/runtimes/linux-x64/native
        cp libnox.so managed/Nox/runtimes/linux-x64/native/

    - name: Download macOS build artifact (libnox.dylib)
      uses: actions/download-artifact@v4
      with:
        name: libnox.dylib

    - name: Copy libnox.dylib to osx-x64 folder
      run: |
        mkdir -p managed/Nox/runtimes/osx/native
        cp libnox.dylib managed/Nox/runtimes/osx/native/

    - name: Create NuGet package
      run: |
        dotnet pack -c Debug managed/Nox/Nox.csproj 

    - name: Upload NuGet package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: managed/Nox/nuget/NoxGame.1.0.0.nupkg
